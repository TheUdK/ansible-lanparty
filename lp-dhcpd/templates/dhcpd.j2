# {{ ansible_managed }}
#

option domain-name "{{ domains.lan }}";
option domain-name-servers 172.16.1.2;
option ntp-servers 172.16.1.3;

ddns-update-style interim;
ddns-domainname "host.{{ domains.lan }}.";
ddns-rev-domainname = "in-addr.arpa.";

default-lease-time 86400;
max-lease-time 172800;

authoritative;
log-facility local6;

###
# RNDC Key for Dynamic DNS
key {{ ns.rndc.keyname }} {
    algorithm {{ ns.rndc.algo }};
    secret {{ ns.rndc.key }};
}

###
# Gathering/parsing request information
set client_ip = binary-to-ascii(10, 8, ".", leased-address);
set client_mac = binary-to-ascii(16, 8, ":", substring(hardware, 1, 6));
set switch_id = pick(substring(option agent.remote-id, 2, 999),"switch");
set port_id = pick(binary-to-ascii(10, 8,".", suffix(option agent.circuit-id, 1)),"0");
set vlan = pick(binary-to-ascii(10, 8,".", substring(option agent.circuit-id, 3, 1)),"0");
set client_name = pick(option host-name,"unknown");
###

###
# Logging
on commit {
    log(concat("Commit: IP: ", client_ip, " Mac: ", client_mac, " Hostname: ", client_name," Switch: ", switch_id ," Port: ", port_id ," vlan: ", vlan));
}

on release {
    log(concat("Release: IP: ", client_ip, " Mac: ", client_mac, " Hostname: ", client_name, " Switch: ", switch_id ," Port: ", port_id ," vlan: ", vlan));
}

on expiry {
    log(concat("Expiry: IP: ", client_ip, " Mac: ", client_mac, " Hostname: ", client_name, " Switch: ", switch_id ," Port: ", port_id ," vlan: ", vlan));
}
#
###

###
# Class Definitions
##
# Map remote-id/curcuit-ids to dhcpd classes
# Generated from pool definitions
#
{% for net, nattrs in dhcp.networks.iteritems() %}
{% if nattrs.classes %}
{% for pool in nattrs.pools %}
{% if (pool.class is defined and pool.class) or pool.class is not defined %}
{% if pool.circuits is defined %}
class "{{ pool.name }}" {
{% if pool.type is defined and pool.type == 'hp' %}
  match if (({%- for c in pool.circuits %}(pick(binary-to-ascii(10, 8, ".", suffix(option agent.circuit-id, 1)), "0") = "{{ c }}"){% if not loop.last %} or
            {% endif %}{% endfor %}){% if pool.remote is defined %} and
            (pick(binary-to-ascii(10, 8, ".", option agent.remote-id), "0.0.0.0") = "{{ pool.remote }}"){% endif %});
{% else %}
  match if (({%- for c in pool.circuits %}(pick(binary-to-ascii(10, 8, "/", suffix(option agent.circuit-id, 2)), "0") = "{{ c }}"){% if not loop.last %} or
            {% endif %}{% endfor %}){% if pool.remote is defined %} and
            (pick(binary-to-ascii(16, 8, ":", suffix(option agent.remote-id, 6)), "0") = "{{ pool.remote }}"){% endif %});
{% endif %}
}

{% else %}
{% set swname = pool.name ~ "-SW" %}
class "{{ pool.name }}" { match if substring(option agent.remote-id, 2,{{ swname | length }}) = "{{ swname | upper }}"; }
{% endif %}
{% endif %}
{% endfor %}
{% endif %}
{% endfor %}

{% for net, nattrs in dhcp.networks.iteritems() %}
# {{ net | capitalize }}
# {{ nattrs.address }}/{{ nattrs.mask }} via {{ nattrs.router }}
# Class matchers are {% if nattrs.classes %}enabled{% else %}disabled{% endif %}

subnet {{ nattrs.address }} netmask {{ nattrs.mask }} {
    option routers {{ nattrs.router }};
    option subnet-mask {{ nattrs.mask }};

{% for pool in nattrs.pools %}
    pool {
{% if nattrs.classes %}
        allow members of "{{ pool.name }}";
{% endif %}
{% if pool.allow is defined %}
{% for a in pool.allow %}
        allow members of "{{ a }}";
{% endfor %}
{% endif %}
{% if pool.deny is defined %}
{% for d in pool.deny %}
        deny members of "{{ d }}";
{% endfor %}
{% endif %}
        range {{ pool.start }} {{ pool.end }};
{% if pool.ports is defined and not pool.ports %}
        ddns-hostname = concat(client_name, ".", "{{ pool.name }}");
{% else %}
        ddns-hostname = concat(client_name, ".", "P", port_id, ".", "{{ pool.name }}");
{% endif %}
    }
{% endfor %}
}

{% endfor %}

# DDNS Forward DNS Zone
#
zone {{ dhcp.dhcpdomain }} {
    primary {{ dhcp.nameservers.0 }};
    key {{ ns.rndc.keyname }};
}

# Reverse DNS Zone Definitions for all address pools
#
{% for net, nattrs in dhcp.networks.iteritems() %}
{% for pool in nattrs.pools %}
{% if pool.zone is defined and not pool.zone %}{% else %}
# RDNS for network '{{ pool.name }}' ({{ pool.start }} - {{ pool.end }})
zone {{ pool.start | regex_replace('(\\d{1, 3})\\.(\\d{1, 3})\\.(\\d{1, 3})\\.\\d{1, 3}', '\\3.\\2.\\1') }}.in-addr.arpa. { primary {{ dhcp.nameservers.0 }}; key {{ ns.rndc.keyname }}; }

{% endif %}
{% endfor %}
{% endfor %}
